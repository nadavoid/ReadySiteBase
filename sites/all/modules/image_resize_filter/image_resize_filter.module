<?php
// $Id: image_resize_filter.module,v 1.35 2009/11/16 04:31:35 quicksketch Exp $

/**
 * @file image_resize_filter.module
 *
 * After adding to an input format, this filter will parse the contents of
 * submitted content and automatically scale image files to match the set
 * dimensions of img tags.
 *
 * Image that have been created take on the ownership of the original file.
 * Making so when the primary node is deleted, the images it provided are
 * deleted also.
 *
 */

/**
 * Implementation of hook_filter().
 */
function image_resize_filter_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {

  switch ($op) {
    case 'list':
      return array(0 => t('Image resize filter'));

    case 'description':
      return t('Resizes images to the exact dimensions specified in the &lt;img&gt; tag.');

    case 'settings':
      return image_resize_filter_form($format);

    case 'process':
      $settings['link'] = variable_get('image_resize_filter_link_'. $format, 0);
      $settings['class'] = variable_get('image_resize_filter_link_class_'. $format, '');
      $settings['rel'] = variable_get('image_resize_filter_link_rel_'. $format, '');
      $settings['image_locations'] = array_filter(variable_get('image_resize_filter_image_locations_'. $format, array('local')));
      $images = image_resize_filter_get_images($settings, $text);
      return image_resize_filter_process($images, $text, $settings);

    default:
      return $text;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function image_resize_filter_nodeapi(&$node, $op, $teaser, $page) {
  if (($op == 'presave' || $op == 'delete') && isset($node->files)) {
    // Delete upload.module derivatives.
    foreach ($node->files as $fid => $file) {
      // File is an an object on delete, but array on presave.
      $file = (array)$file;
      if ($file['remove'] || $op == 'delete') {
        image_resize_filter_delete_derivatives($file['filepath']);
      }
    }
  }
}

/**
 * Implementation of hook_file_delete().
 */
function image_resize_filter_file_delete($file) {
  if (isset($file->filepath)) {
    image_resize_filter_delete_derivatives($file->filepath);
  }
}

/**
 * Implementation of hook_theme().
 */
function image_resize_filter_theme() {
  return array(
    'image_resize_filter_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_file_download().
 */
function image_resize_filter_file_download($filepath) {
  // If this is a resized image, use the same access as the original image.
  $matches = array();
  if (preg_match('/^resize\/(.*)?-\d+x\d+(\.png|jpg|jpeg|gif)$/i', $filepath, $matches)) {
    $headers = module_invoke_all('file_download', $matches[1] . $matches[2]);
    if (in_array(-1, $headers)) {
      return -1;
    }
    if (count($headers)) {
      return array(
        'Content-Type: ' . file_get_mimetype($filepath),
        'Content-Length: ' . filesize(file_create_path($filepath)),
      );
    }
  }
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function image_resize_filter_form_system_file_system_settings_alter($form, $form_state) {
  $form['#submit'][] = 'image_resize_filter_file_system_settings_submit';
}

/**
 * Additional #submit handler for the system_file_system_settings form.
 */
function image_resize_filter_file_system_settings_submit($form, $form_state) {
  // Clear filter caches when changing file system information.
  cache_clear_all('*', 'cache_filter');
}

/**
 * The form for configuring the Image Resize Filter.
 */
function image_resize_filter_form($format) {
  $form = array();

  $form['image_resize'] = array(
    '#type' => 'fieldset',
    '#title' => t('Image resize settings'),
    '#collapsible' => TRUE,
    '#description' => t('The image resize filter will analyze &lt;img&gt; tags and compare the given height and width attributes to the actual file. If the file dimensions are different than those given in the &lt;img&gt; tag, the image will be copied and the src attribute will be updated to point to the resized image.'),
    '#theme' => 'image_resize_filter_form',
    '#format' => $format,
  );

  $form['image_resize']['image_resize_filter_image_locations_'. $format] = array(
    '#type' => 'checkboxes',
    '#title' => t('Resize images stored'),
    '#options' => array('local' => t('Locally'), 'remote' => t('On remote servers')),
    '#default_value' => variable_get('image_resize_filter_image_locations_'. $format, array('local')),
    '#required' => TRUE,
    '#description' => t('This option will determine which images will be analyzed for &lt;img&gt; tag differences. Enabling resizing of remote images can have performance impacts, as all images in the filtered text needs to be transfered via HTTP each time the filter cache is cleared.'),
  );

  $form['image_resize']['image_resize_filter_link_'. $format] = array(
    '#type' => 'checkbox',
    '#title' => t('If resized, add a link to the original image.'),
    '#default_value' => variable_get('image_resize_filter_link_'. $format, 0),
  );

  $form['image_resize']['image_resize_filter_link_class_'. $format] = array(
    '#type' => 'textfield',
    '#title' => t('Optionally, give it the class'),
    '#size' => '10',
    '#default_value' => variable_get('image_resize_filter_link_class_'. $format, ''),
  );

  $form['image_resize']['image_resize_filter_link_rel_'. $format] = array(
    '#type' => 'textfield',
    '#title' => t('and/or a rel attribute'),
    '#size' => '10',
    '#default_value' => variable_get('image_resize_filter_link_rel_'. $format, ''),
  );

  return $form;
}

/**
 * Theme callback to theme the Image Resize Filter form.
 */
function theme_image_resize_filter_form($form) {
  $format = $form['#format'];

  $link = 'image_resize_filter_link_'. $format;
  $class = 'image_resize_filter_link_class_'. $format;
  $rel = 'image_resize_filter_link_rel_'. $format;

  $class_element = ' ';
  $class_element .= '<span class="image-resize-filter-class">';
  $class_element .= check_plain($form[$class]['#title']) .': ';
  $form[$class]['#title'] = NULL;
  $class_element .= drupal_render($form[$class]);
  $class_element .= '</span>';

  $rel_element = ' ';
  $rel_element .= '<span class="image-resize-filter-rel">';
  $rel_element .= check_plain($form[$rel]['#title']) .': ';
  $form[$rel]['#title'] = NULL;
  $rel_element .= drupal_render($form[$rel]);
  $rel_element .= '</span>';

  $link_element = drupal_render($form[$link]);

  $output = '';
  $output .= '<div class="container-inline image-resize-filter-link-options">';
  $output .= $link_element;
  $output .= $class_element;
  $output .= $rel_element;
  $output .= '</div>';

  $placeholder = array(
    '#type' => 'element',
    '#title' => t('Link to the original'),
    '#children' => $output,
    '#description' => t('Linking to the original can be helpful to give users a full-size view of the image. Adding the class "thickbox" is helpful if you have installed the <a href="http://drupal.org/project/thickbox">thickbox module</a>. The rel attribute may be useful when used with the <a href="http://drupal.org/project/lightbox2">lightbox2</a> and <a href="http://drupal.org/project/shadowbox">shadowbox</a> modules.'),
  );

  // Add a little bit of JavaScript. Not cached since it's only used here.
  drupal_add_js(drupal_get_path('module', 'image_resize_filter') .'/image_resize_filter.js', 'module', 'header', FALSE, FALSE);

  return drupal_render($form) . theme('form_element', $placeholder, $output);
}

/**
 * Parsing function to locate all images in a piece of text that need replacing.
 *
 * @param $settings
 *   An array of settings that will be used to identify which images need
 *   updating. Includes the following:
 *
 *   - image_locations: An array of acceptable image locations. May contain any
 *     of the following values: "remote". Remote image will be downloaded and
 *     saved locally. This procedure is intensive as the images need to
 *     be retrieved to have their dimensions checked.
 *
 * @param $text
 *   The text to be updated with the new img src tags.
 */
function image_resize_filter_get_images($settings, $text) {
  $images = array();

  // Find all image tags, ensuring that they have a src.
  $matches = array();
  preg_match_all('/((<a [^>]*>)[ ]*)?(<img[^>]*?src[ ]*=[ ]*"([^"]+)"[^>]*>)/i', $text, $matches);

  // Loop through matches and find if replacements are necessary.
  // $matches[0]: All complete image tags and preceeding anchors.
  // $matches[1]: The anchor tag of each match (if any).
  // $matches[2]: The anchor tag and trailing whitespace of each match (if any).
  // $matches[3]: The complete img tag.
  // $matches[4]: The src value of each match.
  foreach ($matches[0] as $key => $match) {
    $has_link = (bool) $matches[1][$key];
    $img_tag = $matches[3][$key];
    $src = $matches[4][$key];

    $width = NULL;
    $height = NULL;
    $needs_height = FALSE;
    $needs_width = FALSE;

    // Because we don't know the order of the attributes and images might not
    // have both attributes, match individually for height and width.
    foreach (array('width', 'height') as $property) {
      $property_matches = array();
      preg_match_all('/'. $property .'[ ]*([=:])[ ]*"?([0-9]+)"?/i', $img_tag, $property_matches);
      // In the odd scenario there is both a style="width: xx" and a width="xx"
      // tag, base our calculations off the style tag, since that's what the
      // browser will display.
      $property_key = 0;
      $needs_property = FALSE;
      if (count($property_matches[1]) > 1) {
        $property_key = array_search(':', $property_matches[1]);
      }
      // Only a style property found, we'll need to add a real height/width tag
      // to the HTML later. This specifically prevents problems with FCKeditor
      // that only adds style tags when resizing images.
      elseif (!empty($property_matches[1]) && $property_matches[1][$property_key] == ':'){
        $needs_property = TRUE;
      }
      ${$property} = !empty($property_matches[2][$property_key]) ? $property_matches[2][$property_key] : FALSE;
      ${'needs_'. $property} = $needs_property;
    }

    // If height and width are both missing, nothing to do here.
    if (!$width && !$height) {
      continue;
    }

    // Find the image title if any.
    $title = NULL;
    $title_matches = array();
    preg_match('/title[ ]*=[ ]*"([^"]+)"/i', $img_tag, $title_matches);
    if (isset($title_matches[1])) {
      $title = $title_matches[1];
    }

    // Determine if this is a local or remote file.
    $location = 'unknown';
    if (strpos($src, '/') === 0 || strpos($src, '.') === 0) {
      $location = 'local';
    }
    elseif (preg_match('/http[s]?:\/\/'. preg_quote($_SERVER['HTTP_HOST'], '/') .'/', $src)) {
      $location = 'local';
    }
    elseif (strpos($src, 'http') === 0) {
      $location = 'remote';
    }

    // If not resizing images in this location, continue on to the next image.
    if (!in_array($location, $settings['image_locations'])) {
      continue;
    }

    // Convert the URL to a local path.
    $local_path = NULL;
    if ($location == 'local') {
      if (strpos($src, '.') !== 0) {
        // Remove the http:// and base path.
        $local_path = preg_replace('/(http[s]?:\/\/'. preg_quote($_SERVER['HTTP_HOST'], '/') .')?'. preg_quote(base_path(), '/') .'/', '', $src, 1);
        // Convert to a file system path if using private files.
        if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE && preg_match('/^(\?q\=)?system\/files\//', $local_path)) {
          $local_path = file_directory_path() . '/' . preg_replace('/^(\?q\=)?system\/files\//', '', $local_path);
        }
      }
      $local_path = urldecode($local_path);
    }

    // If this is an ImageCache preset, generate the source image if necessary.
    if ($location == 'local' && !file_exists($local_path) && strpos($local_path, 'imagecache') !== FALSE && function_exists('imagecache_build_derivative')) {
      $imagecache_path = preg_replace('/^'. preg_quote(file_directory_path(), '/') .'\/imagecache\//', '', $local_path);
      $imagecache_args = explode('/', $imagecache_path);
      $preset_name = array_shift($imagecache_args);
      $original_path = implode('/', $imagecache_args);
      // ImageCache can resize images both inside and outside of the files
      // directory. If the image doesn't exist at the given path, check inside
      // the files directory.
      if (!file_exists($original_path)) {
        $original_path = file_directory_path() . '/' . $original_path;
      }
      if (file_exists($original_path) && $preset = imagecache_preset_by_name($preset_name)) {
        imagecache_build_derivative($preset['actions'], $original_path, imagecache_create_path($preset_name, $original_path));
      }
    }

    // Get the image size.
    if ($location == 'local') {
      $image_size = @getimagesize($local_path);
    }
    else {
      $image_size = @getimagesize($src);
    }

    // All this work and the image isn't even there. Bummer. Next image please.
    if ($image_size == FALSE) {
      continue;
    }

    $actual_width = $image_size[0];
    $actual_height = $image_size[1];

    // If either height or width is missing, calculate the other.
    if (!$height) {
      $ratio = $actual_height/$actual_width;
      $height = round($ratio * $width);
    }
    elseif (!$width) {
      $ratio = $actual_width/$actual_height;
      $width = round($ratio * $height);
    }

    // Finally, if width and heights match up, don't do anything.
    if ($actual_width == $width && $actual_height == $height) {
      continue;
    }

    // Check the image extension by name.
    $extension_matches = array();
    preg_match('/\.([a-zA-Z0-9]+)$/', $src, $extension_matches);
    if (!empty($extension_matches)) {
      $extension = strtolower($extension_matches[1]);
    }
    // If the name extension failed (such as an image generated by a script),
    // See if we can determine an extension by MIME type.
    elseif (isset($image_size['mime'])) {
      switch ($image_size['mime']) {
        case 'image/png':
          $extension = 'png';
          break;
        case 'image/gif':
          $extension = 'gif';
          break;
        case 'image/jpeg':
        case 'image/pjpeg':
          $extension = 'jpg';
          break;
      }
    }

    // If we're not certain we can resize this image, skip it.
    if (!isset($extension) || !in_array(strtolower($extension), array('png', 'jpg', 'jpeg', 'gif'))) {
      continue;
    }

    // If getting this far, the image exists and is not the right size.
    // Add all information to a list of images that need resizing.
    $images[] = array(
      'expected_size' => array('width' => $width, 'height' => $height),
      'actual_size' => array('width' => $image_size[0], 'height' => $image_size[1]),
      'add_properties' => array('width' => $needs_width, 'height' => $needs_height),
      'title' => $title,
      'has_link' => $has_link,
      'original' => $src,
      'location' => $location,
      'local_path' => $local_path,
      'mime' => $image_size['mime'],
      'extension' => $extension,
    );
  }

  return $images;
}


/**
 * Processing function for image resize filter. Replace img src properties
 * with a URL to a resized image.
 *
 * @param $images
 *   An array of image information, detailing images that need to be replaced.
 * @param $text
 *   The original text of the post that needs src tags updated.
 * @param $settings
 *   An array of setting for generating the image tag.
 */
function image_resize_filter_process($images, $text, $settings) {
  $file_directory_path = file_directory_path();
  $local_file_path = '';
  foreach ($images as $image) {
    // Copy remote images locally.
    if ($image['location'] == 'remote') {
      $result = drupal_http_request($image['original']);
      if ($result->code == 200) {
        $tmp_file = tempnam(file_directory_temp(), 'image_resize_filter_');
        $handle = fopen($tmp_file, 'w');
        fwrite($handle, $result->data);
        fclose($handle);
        $local_file_path = 'resize/remote/'. md5($result->data) .'-'. $image['expected_size']['width'] .'x'. $image['expected_size']['height'] .'.'. $image['extension'];
        $image['local_path'] = $tmp_file;
        $image['destination'] = $file_directory_path .'/'. $local_file_path;
      }
      else {
        continue;
      }
    }
    else {
      $path_info = image_resize_filter_pathinfo($image['local_path']);
      $local_file_dir = preg_replace('/^'. preg_quote($file_directory_path, '/') .'\/?/', '', $path_info['dirname']);
      $local_file_dir = !empty($local_file_dir) ? $local_file_dir . '/' : '';
      $local_file_path = 'resize/'. $local_file_dir . $path_info['filename'] .'-'. $image['expected_size']['width'] .'x'. $image['expected_size']['height'] .'.'. $path_info['extension'];
      $image['destination'] = $file_directory_path .'/'. $local_file_path;
    }

    // Ensure that the destination directories exist.
    $folders = explode('/', dirname($local_file_path));
    $current_directory = $file_directory_path .'/';
    foreach ($folders as $folder) {
      $current_directory .= $folder .'/';
      $check_directory = $current_directory;
      // Use the "quiet" version of file_check_directory() provided by FileField
      // if it exists. This suppresses "Directory was created" messages.
      $file_check_directory = function_exists('field_file_check_directory') ? 'field_file_check_directory' : 'file_check_directory';
      $file_check_directory($check_directory, FILE_CREATE_DIRECTORY);
    }

    // Resize the local image.
    if (!file_exists($image['destination'])) {
      if (module_exists('imageapi') && imageapi_default_toolkit()) {
        $res = imageapi_image_open($image['local_path']);
        imageapi_image_resize($res, $image['expected_size']['width'], $image['expected_size']['height']);
        imageapi_image_close($res, $image['destination']);
      }
      else {
        image_resize($image['local_path'], $image['destination'], $image['expected_size']['width'], $image['expected_size']['height']);
      }
      @chmod($image['destination'], 0664);
    }

    // Replace the existing image source with the resized image.
    // Set the image we're currently updating in the callback function.
    image_resize_filter_update_tag(NULL, $image, $settings);
    $text = preg_replace_callback('/(<img[^>]*?src[ ]*=[ ]*")'. preg_quote($image['original'] ,'/') .'("[^>]*?)(\/?>)/i', 'image_resize_filter_update_tag', $text, 1);
  }
  return $text;
}

/**
 * Regular expression callback.
 *
 * @param $matches
 *   The matches for a call to preg_replace_callback().
 * @param $new_image
 *   If passed in, this will set a static variable so that this image data is
 *   available when this function is called from a regular expression.
 */
function image_resize_filter_update_tag($matches = NULL, $new_image = NULL, $new_settings = NULL) {
  global $base_url;
  static $image, $settings;

  $image = isset($new_image) ? $new_image : $image;
  $settings = isset($new_settings) ? $new_settings : $settings;

  if (!isset($matches)) {
    return;
  }

  $src = $image['destination'];
  // Make the new file private if the original was private.
  if (strpos($image['original'], 'system/files/') !== FALSE && variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE) {
    $src = file_create_url($src);
  }
  else {
    $src = $base_url . '/' . $src;
  }
  // Strip the http:// from the path if the original did not include it.
  if (!preg_match('/^http[s]?:\/\/'. preg_quote($_SERVER['HTTP_HOST']) .'/', $image['original'])) {
    $src = preg_replace('/^http[s]?:\/\/'. preg_quote($_SERVER['HTTP_HOST']) .'/', '', $src);
  }

  $output = '';
  $output .= $matches[1]; // The start of the tag.
  $output .= $src; // The new src.
  $output .= $matches[2]; // The end of the tag, excluding the closing "/>".

  // Add height and width properties if they are missing from the original tag.
  $output .= $image['add_properties']['width'] ? ' width="'. $image['expected_size']['width'] .'"' : '';
  $output .= $image['add_properties']['height'] ? ' height="'. $image['expected_size']['height'] .'"' : '';

  $output .= $matches[3]; // The closing "/>".
  if ($settings['link'] && !$image['has_link']) {
    $class = !empty($settings['class']) ? ' class="'. $settings['class'] .'"' : '';
    $rel = !empty($settings['rel']) ? ' rel="'. $settings['rel'] .'"' : '';
    $title = !empty($image['title']) ? ' title="'. $image['title'] .'"' : '';
    $output = '<a href="'. $image['original'] .'"'. $title . $class . $rel . '>'. $output .'</a>';
  }

  return $output;
}

/**
 * Delete all generated image when the original file is removed.
 */
function image_resize_filter_delete_derivatives($original_filepath) {

  // First delete all derivatives in the saved file location.
  $path_info = image_resize_filter_pathinfo($original_filepath);
  $basename = $path_info['filename'];
  $extension = $path_info['extension'];
  $file_directory_path = file_directory_path();
  $local_file_dir = str_replace($file_directory_path, '', $path_info['dirname']);
  $local_file_dir = !empty($local_file_dir) ? $local_file_dir . '/' : '';

  $directory = $file_directory_path .'/resize/'. $local_file_dir;

  // Delete all the derivatives.
  file_scan_directory($directory, quotemeta($basename) .'-[0-9]+[x][0-9]+\.'. quotemeta($extension), array('.', '..', 'CVS'), 'file_delete');

  // Then work up the directories and delete any empty ones.
  $folders = explode('/', $directory);
  $directories = array();
  $current_directory = '';
  foreach ($folders as $folder) {
    $current_directory .= $folder .'/';
    $directories[] = $current_directory;
  }

  foreach (array_reverse($directories) as $directory) {
    if ($directory == ($file_directory_path .'/')) {
      break;
    }

    $directory_files = file_scan_directory($directory, '.*');
    if (empty($directory_files)) {
      @rmdir($directory);
    }
    else {
      break;
    }
  }
}

/**
 * Delete the entire set of cached images.
 */
function image_resize_filter_delete_all() {
  $directory = file_directory_path() .'/resize';
  image_resize_filter_delete_recursive($directory);
  cache_clear_all('*', 'cache_filter');
}

/**
 * Recursive deletion function for clearing out resized images directory.
 */
function image_resize_filter_delete_recursive($path) {
  if (is_file($path) || is_link($path)) {
    unlink($path);
  }
  elseif (is_dir($path)) {
    $dir = dir($path);
    while (($entry = $dir->read()) !== false) {
      if ($entry == '.' || $entry == '..') {
        continue;
      }
      $entry_path = $path .'/'. $entry;
      image_resize_filter_delete_recursive($entry_path);
    }
    rmdir($path);
  }
}

/**
 * Utility function to return path information.
 */
function image_resize_filter_pathinfo($path) {
  $info = pathinfo($path);
  // Filename was added in PHP 5.2, add it for older PHP versions.
  if (!isset($info['filename'])) {
    $info['filename'] = basename($path, '.' . $info['extension']);
  }
  return $info;
}

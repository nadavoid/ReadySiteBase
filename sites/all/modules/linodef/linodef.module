<?php
// $Id: linodef.module,v 1.1.2.12 2009/12/17 23:23:04 roidanton Exp $

/**
 * @defgroup linodef Linodef: Inline and link Drupal objects
 *
 * Linodef is a filter that inlines Drupal objects by their ID and can alter their embedded layout.
 */
// Default link titles.
define('LINODEF_FORMAT_TITLE_NODE', t('Node') . ' [nid]: [title]');
define('LINODEF_FORMAT_TITLE_TERM', t('Shows a teaser list of nodes using term !term', array('!term' => '[cat-raw]')));
define('LINODEF_FORMAT_TITLE_VIEW', t('Show !view', array('!view' => '[viewname]')));

/**
 * @file
 *
 * The main Linodef filter module with filter hooks and a unified message system for all Linodef modules.
 *
 * @ingroup linodef
 * @author Roi Danton
 */

/**
 * Implementation of hook_filter.
 */
function linodef_filter($op, $delta = 0, $format = -1, $text = '') {
	if ($op == 'list') {
		return array(
			0 => t('Linodef - Inline and link Drupal objects.')
		);
	}

	// Provides extensibility.
	switch ($delta) {

		case 0:

			switch ($op) {
				case 'description':
					return t('Substitutes the ID of an element for its title or value & links to it. It supports options to alter the output.');

				// Since lineodef will return a different result on each page load, we
				// need to return TRUE for "no cache" to ensure that the filter is run
				// every time the text is requested. Has a serious performance impact!
				case 'no cache':
					return TRUE;

				// I tried to use the bytes 0xFE and 0xFF to replace < and > here. These bytes
				// are not valid in UTF-8 data and thus unlikely to cause problems.
				// This doesnt work with double quotes "", but we need this in order to execute
				// the old method of the override option, so valid bytes U+10004C & U+1003CD
				// have been used.
				case 'prepare':
					return preg_replace('@<#([0-9]+)>(.*?)</#>@s', "\xf4\x80\x81\x8c#$1\xf4\x80\x8f\x8d$2\xf4\x80\x81\x8c/#\xf4\x80\x8f\x8d", $text);

				case 'process':
					// Check if the current node is in teaser of full view.
					$buildmode = (arg(0) == 'node' && is_numeric(arg(1))) ? 'full' : 'teaser';
					define('LINODEF_BUILDMODE', $buildmode);

					module_load_include('inc', 'linodef', '/includes/linodef-filter');
					return _linodef_filter_process($text, $format);

				case 'settings':
					// Form to set title.
					$form['linodef_settings'] = array(
						'#type' => 'fieldset',
						'#title' => t('Linodef filter'),
						'#collapsible' => TRUE,
					);
					$form['linodef_settings']['linodef_' . $format . '_title_node'] = array(
						'#type' => 'textfield',
						'#title' => t('Node title'),
						'#default_value' => variable_get('linodef_' . $format . '_title_node', LINODEF_FORMAT_TITLE_NODE),
						'#description' => t('The title (text on hover) on node links.') . ' ' . t('Available Linodef tokens are !tokens. If more are required then token module has to be used.', array('!tokens' => linodef_tokens('node'))),
					);
					if (module_exists('token')) {
						$form['linodef_settings']['linodef_' . $format . '_title_node_token'] = array(
							'#type' => 'checkbox',
							'#title' => t('Use token module (experimental)'),
							'#default_value' => variable_get('linodef_' . $format . '_title_node_token', 0),
							'#description' => t('This offers more tokens but since the CCK token plugin reloads full-fledged node and field objects this can cause major performance issues especially when many fields are used.'),
						);
						$form['linodef_settings']['node_token_help'] = array(
							'#title' => t('Replacement patterns'),
							'#type' => 'fieldset',
							'#collapsible' => TRUE,
							'#collapsed' => TRUE,
						);
						$form['linodef_settings']['node_token_help']['help']  = array(
							'#value' => theme('token_help', 'node'),
						);
					}
					$form['linodef_settings']['linodef_' . $format . '_title_term'] = array(
						'#type' => 'textfield',
						'#title' => t('Term title'),
						'#default_value' => variable_get('linodef_' . $format . '_title_term', LINODEF_FORMAT_TITLE_TERM),
						'#description' => t('The title (text on hover) on term links.') . ' ' . t('Available Linodef tokens are !tokens. If more are required then token module has to be used.', array('!tokens' => linodef_tokens('term'))),
					);
					if (module_exists('token')) {
						$form['linodef_settings']['linodef_' . $format . '_title_term_token'] = array(
							'#type' => 'checkbox',
							'#title' => t('Use token module'),
							'#default_value' => variable_get('linodef_' . $format . '_title_term_token', 0),
							'#description' => t('This offers more tokens but can cause performance issues.'),
						);
						$form['linodef_settings']['term_token_help'] = array(
							'#title' => t('Replacement patterns'),
							'#type' => 'fieldset',
							'#collapsible' => TRUE,
							'#collapsed' => TRUE,
						);
				
						$form['linodef_settings']['term_token_help']['help']  = array(
							'#value' => theme('token_help', 'taxonomy'),
						);
					}
					$form['linodef_settings']['linodef_' . $format . '_title_view'] = array(
						'#type' => 'textfield',
						'#title' => t('View title'),
						'#default_value' => variable_get('linodef_' . $format . '_title_view', LINODEF_FORMAT_TITLE_VIEW),
						'#description' => t('The title (text on hover) on view links.') . ' ' . t('Available Linodef tokens are !tokens.', array('!tokens' => linodef_tokens('view'))),
					);
					// Additionally put form to enter string/html for the case "access denied" herein. -> http://drupal.org/node/335438
					return $form;
			}
			break;
	}
}

/**
 * Implementation of hook_filter_tips.
 */
function linodef_filter_tips($delta, $format, $long = FALSE) {
	switch ($delta) {
		case 0:
			if ($long) {
				module_load_include('inc', 'linodef', '/includes/linodef-filter-tips');
				return _linodef_filter_tips();
			}
			else {
				$short = t('Inline Drupal objects by ID and alter them by options (<a href="@format-tips-page">[#8], [#8:field_name], [#8:field_name comment], [#8,override="Your Text"], [#23,tid comment]</a>).', array('@format-tips-page' =>  url('filter/tips/'. $format, array('fragment' => 'linodef'))));
				$short .=  '<br />' . t('Options') . ': ';
				$options = new linodef_tags;
				foreach ($options->valid_options as $key => $value) {
					$short .= $key;
					if ($value['value']['#valid']) {
						$short .= '="' . implode(',', array_keys($value['value']['#valid'])) . '"';
					}
					$short .= ', ';
				}
				return $short;
			}
			break;
	}
}

/**
 * Implementation of hook_menu().
 */
function linodef_menu() {
	// Admin settings.
	$items['admin/settings/linodef'] = array(
		'title' => 'Linodef',
		'description' => 'Adjust settings for Linodef',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('linodef_settings_form'),
		'file' => 'linodef.admin.inc',
		'file path' => drupal_get_path('module', 'linodef') .'/includes',
		'access arguments' => array('administer site configuration'),
	);
	$items['admin/settings/linodef/settings'] = array(
		'title' => 'Settings',
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	$items['admin/settings/linodef/tagoptions'] = array(
		'title' => 'Tagoption settings',
		'type' => MENU_LOCAL_TASK,
		'description' => 'Set option status and override options',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('linodef_options_form'),
		'file' => 'linodef.admin.inc',
		'file path' => drupal_get_path('module', 'linodef') .'/includes',
		'access arguments' => array('administer site configuration'),
	);
	return $items;
}

/**
 * Defines all supported elements.
 * Description for some properties of the valid options object:
 *   #types (array): The object types the option is valid for. As value use TRUE or a string if you want specify the validation in the taglist UI.
 *   value #valids (array): The keys are valid values.
 *   value #valid_dynamic (array): If set the option may contain further values than those given in #valids. The values of this array should be the types where the valid option values are extended.
 * 
 */
class linodef_tags {
	// No private for providing PHP4 compatibility.
	// Returns valid value array for options. Should contain a hook.
	function create_values($types) {
		foreach ($types as $type => $value) {
			$option['type'][$type] = array(
				'#description' => t('Set !type', array('!type' => $type))
			);
		}

		$option['content'] = array(
			'title' => array(
				'#types' => array('node' => TRUE, 'view' => TRUE),
				'#description' => t('Embed title'),
			),
			'field_' => array(
				'#types' => array('node' => TRUE),
				'#description' => t('Embed a field'),
				'#dynamic' => TRUE,
			),
			'content' => array(
				'#types' => array('node' => TRUE, 'view' => TRUE),
				'#description' => t('Embed content'),
			),
			'body_buildmode' => array(
				'#types' => array('node' => TRUE),
				'#description' => t('Embed body or teaser depending on build mode'),
			),
			'body' => array(
				'#types' => array('node' => TRUE),
				'#description' => t('Embed body'),
			),
			'teaser' => array(
				'#types' => array('node' => TRUE),
				'#description' => t('Embed teaser'),
			),
		);

		$option['display'] = array(
			'page_' => array(
				'#types' => array('view' => TRUE),
				'#description' => t('Embed a page display'),
				'#dynamic' => TRUE,
			),
			'block_' => array(
				'#types' => array('view' => TRUE),
				'#description' => t('Embed a block display'),
				'#dynamic' => TRUE,
			),
			'feed_' => array(
				'#types' => array('view' => TRUE),
				'#description' => t('Embed a feed display'),
				'#dynamic' => TRUE,
			),
		);

		/* Contentvalue valids are already checked at value validation. Dynamic valids won't either be meaningful when cardinality = unlimited.
		$option['contentvalue'] = array(
			'all' => array(
				'#description' => t('Show all values.')
			)
		);
		for ($i=0; $i<=100; $i++) {
			$value = (string) $i;
			$option['contentvalue'][$value] = array(
				'#description' => t('Show value %i.', array('%i' => $i))
			);
		}*/

		return $option;
	}
	// Constructor in PHP4 style for backwards compatibility. Should contain a hook.
	// Caching faster than construction?
	function linodef_tags() {
		// Supported object types. Designed to be able to use array_key_exists() because it seems to be faster than in_array().
		$this->valid_types = array(
			'node' => TRUE,
			'term' => TRUE,
			'view' => TRUE
		);
		// Values for the option types.
		$valid_values = $this->create_values($this->valid_types);

		// Options and their properties.
		$this->valid_options = array(
			'type' => array(
				'#title' => t('Object type'),
				'#types' => $this->valid_types,
				'#description' => t('The Drupal object type the tag ID stands for.'),
				'value' => array(
					'#valid' => $valid_values['type'],
					'#description' => t('Name of a Drupal object type. If the type is set to node then this option do not need to appear in the tag.'),
				),
			),
			'content' => array(
				'#title' => t('Content'),
				'#description' => t('Select certain content of an object, e.g. fields, body, the complete node content or a views title. This option is also valid as short syntax %short_syntax.', array('%short_syntax' => '[#id:content]')),
				'#types' => array('node' => TRUE, 'view' => TRUE),
				'value' => array(
					'#valid' => $valid_values['content'],
					'#valid_dynamic' => array('fields'),
					'#description' => t('Enter %title to embed the title only. Use %content/%body/%teaser to embed the whole content, the body or teaser. Enter a field name to embed field content. If not set then node tags use %title, view tags use %content.', array('%title' => 'title', '%content' => 'content', '%body' => 'body', '%teaser' => 'teaser')),
				)
			),
			'contentvalue' => array(
				'#title' => t('Content value'),
				'#description' => t('Select a certain or several values of a multiple value field. This option is not required. If it is not used then the first value of the field will be selected automatically. This option is also valid as short syntax %short_syntax.', array('%short_syntax' => '[#id:content:contentvalue]')),
				'#types' => array('node' => 'fields'),
				'value' => array(
					'#description' => t('Use a number or "all" if you want to embed all values of multiple value CCK formatters. The first value of a field is 0, the second is 1 and so on.'),
				)
			),
			'nolink' => array(
				'#title' => t('No link'),
				'#types' => $this->valid_types,
				'#description' => t('The embedded element will not be linked.'),
				'#active' => TRUE,
				'auto' => array(
					'#description' => t('If the embedded content contains HTML block elements the option nolink will be appended to the tag automatically. This prevents from odd looking html output and is recommended.'),
				)
			),
			'override' => array(
				'#title' => t('Override embedded content'),
				'#types' => $this->valid_types,
				'#description' => t('The entered text will replace the embedded content of the object. Useful for creating dynamic links to objects while using a custom text.'),
				'value' => array(
					'#description' => t('All characters except %char1 and %char2 are allowed.', array('%char1' => ']', '%char2' => '"'))
				)
			),
			'attributes' => array(
				'#title' => t('HTML attributes'),
				'#types' => $this->valid_types,
				'#description' => t('Append HTML attributes to the tag.'),
				'value' => array(
					'#description' => t('Separate attributes as usual by space, e.g. %example.', array('%example' => 'class=\'highlighted\' name=\'anchor\' style=\'color: red; text-decoration: underline;\''))
				)
			),
			'formatter' => array(
				'#title' => t('CCK formatter'),
				'#types' => array('node' => TRUE),
				'#description' => t('Override the default CCK build mode sensitive formatter.'),
				'value' => array(
					'#description' => t('Enter a valid formatter. If the formatter is not valid the default formatter is used.'),
				)
			),
			'visibility' => array(
				'#title' => t('Build mode visibility'),
				'#types' => $this->valid_types,
				'#description' => t('The tag will be visible only in the selected build mode. Fields already heed build mode by using formatters.'),
				'value' => array(
					'#valid' => array(
						'full' => array('#description' => t('Show when viewing a full node')),
						'teaser' => array('#description' => t('Show when viewing teasers'))
					),
					'#description' => t('The current build mode detection might not work with views. When visiting a view page the build mode "teaser" is always active.'),
				)
			),
			'translation' => array(
				'#title' => t('Translation'),
				'#types' => array('node' => TRUE),
				'#description' => t('If the embedded node has a translation in the specified language than the translated node is embedded instead. Useful if you embed a node which has no translated node yet but you want to embed the translated node as soon as it is created.'),
				'value' => array(
					'#description' => t('Use the abbrevation of the language. Often a Drupal language uses the abbrevation defined by <a href="!iso-link">ISO 639-1/2</a>, e.g. de.', array('!iso-link' => 'http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes')),
				)
			),
			'display' => array(
				'#title' => t('Display'),
				'#description' => t('Select a certain display of a view. Make sure the HTML filter you use allows those HTML tags required by the view, e.g. &lt;table&gt; for a view display using a table. Otherwise the embedded view will look weird.'),
				'#types' => array('view' => TRUE),
				'value' => array(
					'#valid' => $valid_values['display'],
					'#valid_dynamic' => array('views'),
					'#description' => t('Retrieve the display id from the view edit page by hovering over the display and reading the last part of the link, e.g. page_1 or feed_1.'),
				)
			),
			'arguments' => array(
				'#title' => t('View arguments'),
				'#types' => array('view' => TRUE),
				'#description' => t('Arguments passed to the view.'),
				'value' => array(
					'#description' => t('Separate them by %separator, e.g. Satyr%separatorPan%separatorFaunus%separatorCentaur.', array('%separator' => ',')),
				)
			)
		);
	}
}

/**
 * Create an array of valid options using the class linodef_supported_tags.
 *
 * Buttons API requires this function, too. So it is in modules main file.
 *
 * @param $option_string
 *   The tag option(s) as string to prepare.
 * @return array
 *   - options
 *     - key: the option without the value
 *       - #value: the option value without "", if option has no value then TRUE
 *       - #validation_value: For validation function, could differ from value.
 *   - message
 *     - not valid options or options with invalid values (keys are reason and option)
 *   - valid_types
 *   - valid_options
 *
 * @see linodef_buttonsapi_validate_tagoptions() _linodef_filter_processoptions()
 */
function linodef_tag_validate($option_string) {
	$options = linodef_tag_option_str2array($option_string);
	// Backwards compatibility.
	$options = linodef_tag_option_deprecated($options);

	$supported_tags = new linodef_tags;

	// Validate.
	foreach ($options as $option => $value) {
		// Check if option is disabled.
		$name_status = 'linodef_option_status_' . $option;
		if (variable_get($name_status, TRUE) == FALSE) {
			continue;
		}

		if (array_key_exists($option, $supported_tags->valid_options)) {
			// Options without values.
			if (!$supported_tags->valid_options[$option]['value']) {
				$output['options'][$option]['#value'] = TRUE;
			}
			// Check existing values.
			elseif ($value !== '' && $value !== NULL) {
				if ($valid_values = $supported_tags->valid_options[$option]['value']['#valid']) {
					// Debug: print('(' . __FUNCTION__ . ') ');print('Option: ' . $option . ' Value: <b>' . $value . '</b><pre>');print_r($valid_values);print('</pre>');
					if (array_key_exists($value, $valid_values)) {
						// Option has valid value.
						$output['options'][$option]['#value'] = $value;
						$output['options'][$option]['#validation_value'] = $value;
					}
					// Extend valid values for dynamic values.
					elseif ($supported_tags->valid_options[$option]['value']['#valid_dynamic']) {
						foreach ($valid_values as $valid_value => $properties) {
							// Debug: print('(' . __FUNCTION__ . ') ');print('Entered value:<b>' . $value . '</b> Entered stripped:<b>' . substr($value, 0, strlen($valid_value)) . '</b> Validation value:<b>' . $valid_value . '</b><br/>');
							if (substr($value, 0, strlen($valid_value)) == $valid_value) {
								$output['options'][$option]['#value'] = $value;
								$output['options'][$option]['#validation_value'] = $valid_value;
								break;
							}
						}
					}
					if (!isset($output['options'][$option]['#value'])) {
						// Set wrong value.
						$output['message']['value']['wrong'][$option]['#value'] = $value;
						$output['message']['value']['wrong'][$option]['#valid'] = implode(', ', array_keys($valid_values));
					}
				}
				else {
					// Option has no validation for values.
					$output['options'][$option]['#value'] = $value;
					$output['options'][$option]['#validation_value'] = $value;
				}
			}
			// Check for optional values.
			elseif ($supported_tags->valid_options[$option]['value']['#optional']) {
				$output['options'][$option]['#value'] = TRUE;
			}
			// Set empty value.
			else {
				$output['message']['value']['empty'][$option] = TRUE;
			}
		}
		else {
			$output['message']['unknown'][$option] = $value;
		}
	}

	// Set active options.
	foreach ($supported_tags->valid_options as $option => $properties) {
		$name_active = 'linodef_option_active_' . $option;
		if (variable_get($name_active, FALSE)) {
			$output['options'][$option]['#value'] = TRUE;
		}
	}

	$output['valid_types'] = $supported_tags->valid_types;
	$output['valid_options'] = $supported_tags->valid_options;
	return $output;
}

/**
 * Transforms a string of tag options into a array.
 *
 * @param $option_string
 *   The tag option(s) as string.
 * @return array
 *   - options
 *     - key: the option without the value
 *     - value: the option value without "", if option has no value then NULL
 */
function linodef_tag_option_str2array($option_string) {
	// Replace , and = inside "".
	// Using preg_replace_callback() to avoid modificator 'e' (which escapes ',",\ and NULL).
	$option_string = preg_replace_callback('@(="[^"]*")@', create_function('$treffer', 'return str_replace(",", "\xf4\x80\x81\x8c", $treffer[0]);'), $option_string);
	$option_string = preg_replace_callback('@("[^",]*")@', create_function('$treffer', 'return str_replace("=", "\xf4\x80\x8f\x8d", $treffer[0]);'), $option_string);

	// Create the array.
	// Several options separated by comma.
	if (strpos($option_string, ',') !== FALSE) {
		$option_array = explode(',', $option_string);
		foreach ($option_array as $value) {
			// If option with value.
			if (($pos = strpos($value, '=')) !== FALSE) {
				$option_key = substr($value, 0, $pos);
				$value = substr($value, -(strlen($value)-$pos-1));
			}
			else {
				$option_key = $value;
				$value = NULL;
			}
			$options[$option_key] = $value;
		}
	}
	// Only one option and therefore no separator.
	else {
		if (($pos = strpos($option_string, '=')) !== FALSE) {
			$option_key = substr($option_string, 0, $pos);
			$value = substr($option_string, -(strlen($option_string)-$pos-1));
		}
		else {
			$option_key = $option_string;
			$value = NULL;
		}
		$options[$option_key] = $value;
	}

	// Replace ,= back and remove "" from value.
	foreach ($options as &$value) {
		if (is_string($value)) {
			$value = str_replace("\xf4\x80\x81\x8c", ",", $value);
			$value = str_replace("\xf4\x80\x8f\x8d", "=", $value);
			$value = str_replace('"', "", $value);
		}
	}
	unset($value);
	// Debug: print($option_string . '<pre>');print_r($options);print('</pre><br />');
	return $options;
}

/**
 * Substitutes deprecated options with new ones.
 *
 * @param array $options
 *   - keys: the options
 *   - values: the option values
 * @return array
 *   The option array without deprecated elements.
 */
function linodef_tag_option_deprecated($options, $text = '') {
	// Avoid duplicate messages.
	static $processed_options = array();
	$deprecated = array(
		'linktext' => array(
			'#option' => 'override',
		),
		'viewtitle' => array(
			'#option' => 'content',
			'#value'  => 'title',
		),
		'viewargs' => array(
			'#option' => 'arguments',
		),
		'viewdisplay' => array(
			'#option' => 'display',
		),
		'nid' => array(
			'#option' => 'type',
			'#value'  => 'node'
		),
		'tid' => array(
			'#option' => 'type',
			'#value'  => 'term'
		),
		'viewid' => array(
			'#option' => 'type',
			'#value'  => 'view'
		),
	);
	foreach ($options as $key => $value) {
		//Debug: print($key . ':' . $value . '<br />');
		if (array_key_exists($key, $deprecated) && !$deprecated[$key]['#remove']) {
			$newoption = $deprecated[$key]['#option'];
			$newvalue = $deprecated[$key]['#value'] ? $deprecated[$key]['#value'] : $value;
			$output[$newoption] = $newvalue;
			if (!in_array($key, $processed_options)) {
				$processed_options[] = $key;
				$option = $deprecated[$key]['#value'] ? $newoption . '="' . $deprecated[$key]['#value'] . '"' : $newoption;
				if (variable_get('linodef_message_level', 'all') == 'all') {
					drupal_set_message($text . t('The option %option_deprecated is deprecated and replaced by option %option_new.', array('%option_deprecated' => $key, '%option_new' => $option)));
				}
			}
		}
		else {
			$output[$key] = $value;
		}
	}
	return $output;
}

/**
 * Delete those Linodef tags that embeds content.
 *
 * Buttons API requires this function, too. So it is in modules main file.
 *
 * @param $body
 *   The string from which the tags should be deleted.
 * @return
 *   String which contains no Linodef tags.
 *
 * @see _linodef_buttonsapi_getfieldsbyfieldname() _linodef_find_nodesnfields()
 */
function linodef_removetags($body) {
	$preg = array(
		// Every Linodef tag with or without fields, options and comments.
		"@\[#([0-9a-zA-Z_]+)(.*?)\]@e" => '',
	);
	return preg_replace(array_keys($preg), array_values($preg), $body);
}

/**
 * Create custom Linodef tokens without a need for tokens module.
 *
 * @param $type
 *   May be node, term or view.
 * @param $object
 *   If NULL a string is returned.
 * @return
 *   An array with token replace pairs or a string with available tokens.
 */
function linodef_tokens($type, $object = NULL) {
	switch ($type) {
	case 'node':
		if ($object) {
			return array(
				'[nid]' => $object->nid,
				'[type]' => $object->type,
				'[language]' => $object->language,
				'[title]' => $object->title,
				'[author-uid]' => $object->uid,
				'[author-name]' => $object->name,
			);
		}
		else {
			return '[nid], [type], [language], [title], [author-uid], [author-name]';
		}
	case 'term':
		if ($object) {
			return array(
				'[tid]' => $term->tid,
				'[vid]' => $term->vid,
				'[cat-raw]' => $term->name,
				'[cat-description]' => $term->description,
			);
		}
		else {
			return '[tid], [vid], [cat-raw], [cat-description]';
		}
	case 'view':
		if ($object) {
			return array(
				'[viewname]' => $object,
			);
		}
		else {
			return '[viewname]';
		}
	}
}

/**
 * Keep track of running processes, e.g. to prevent execution when already running.
 *
 * @param int $in_running
 *   Set the running status or leave blank to retrieve it.
 * @param string $type
 *   An unique type so this function can track several processes at once.
 */
function linodef_process_running($type, $in_running = NULL) {
	static $running;
		if (isset($in_running)) $running[$type] = $in_running;
	return $running[$type];
}

/**
 * Returns messages that are needed several times in the filter and Buttons API and thus should be identical and in modules root.
 *
 * Additionally the function supports custom messages and all messages can be set with Drupals message system, too.
 * It heeds the admin setting for Linodef message levels and locations.
 *
 * @param array $message
 *      - error:  An array with key = element type and value = element as well as a string defining the error type. Output is "t(Key) <em>value</em> t(type)". Allowed element types are:
 *          - comment
 *          - content type
 *          - node
 *          - field
 *          - term
 *          - view
 *          - vocabulary
 *          - type: A string that creates a message depending on its value (error type). Allowed values are "access denied" and "not found".
 *      - warning: A default message with inline text replaces. Value is the text replacer and in most cases a string. Output depends on key. Provided keys (default messages) are:
 *          - activate module: Info that the module set in value should be installed and activated (e.g. to use certain features).
 *          - check variable: Check variable with name set in value.
 *          - option ignored: Value must be an array with keys %id and %option.
 *          - option unknown: Value must be an array with keys %id and %option.
 *          - supported field types: Info message about the fieldtypes that are supported.
 *      - explanation: A default subclause with inline text replaces. Value is the text replacer. Output depends on key. Provided keys (default messages) are:
 *          - option not compatible with objtype: Value must be an array with keys %objtype and %option.
 *          - option to use in tag id:  Value must be an array with keys %id and %option.
 *      - custom: A string with a custom message. In most cases a subordinate clause of an error or warning messages for additional explanations. Value is outputted directly.
 * @param string $drupal_set_message_type
 *      User can override the default message type. Allowed values are "status", "warning" or "error".
 * @param bool $drupal_set_message
 *      If TRUE Drupal will set a message, see drupal_set_message().
 * @return string
 *      Returns a message.
 *
 * @see drupal_set_message() linodef_theme_settings()
 */
function linodef_message($message = array(), $drupal_set_message_type = NULL, $drupal_set_message = TRUE) {
	// Skip if the linodef filter is called by token_replace() from
	// within the linodef filter. This prevents duplicated messages.
	if (linodef_process_running('token_replace')) {
		return '';
	}
	// Message appearance, see linodef_theme_settings().
	$message_location = variable_get('linodef_message_location', array('inline' => 'inline', 'page' => 'page'));
	$message_location_none = (empty($message_location['page']) && empty($message_location['inline'])) ? TRUE : FALSE;
	$message_level = variable_get('linodef_message_level', 'all');

	if (is_array($message) && !$message_location_none) {
		// Output sorted as input.
		foreach ($message as $mainkey => $mainvalue) {
			// Create an error message.
			if (is_array($mainvalue) && substr($mainkey, 0, 5) == 'error') {
				// Get elements if valid.
				foreach ($mainvalue as $key => $value) {
					if ($key != 'type') {
						switch ($key) {
							case 'comment':
								$element[$key] = t('Comment');
								break;
							case 'content type':
								$element[$key] = t('Content type');
								break;
							case 'field':
								$element[$key] = t('Field');
								break;
							case 'node':
								$element[$key] = t('Node');
								break;
							case 'term':
								$element[$key] = t('Term');
								break;
							case 'view':
								$element[$key] = t('View');
								break;
							case 'vocabulary':
								$element[$key] = t('Vocabulary');
								break;
						}
						$element[$key] ? $element[$key] .= ' <em>'. $value .'</em>' : $element[$key] = t('Unknown key %key with value %value for %variable in %function', array('%key' => $key, '%value' => $value, '%variable' => '$message[\''. $mainkey .'\']', '%function' => __FUNCTION__));
					}
				}
				$element_string = implode(' & ', $element);
				// Validate & set message with elements.
				if (is_string($mainvalue['type'])) {
					switch ($mainvalue['type']) {
						case 'access denied':
							// drupal_access_denied() doesn't fit here because no page should be returned and the pagetitle should not show "Access denied"
							if ($message_level != 'critical') {
								// Support for custom message along with heeding potx pot extraction process. Can't avoid error message of potx during extraction though.
								if (variable_get('linodef_message_accessdenied', FALSE) != FALSE) {
									$output_array['error'] = t(variable_get('linodef_message_accessdenied', 'Access to !element denied'), array('!element' => $element_string));
								}
								else {
									$output_array['error'] = t('Access to !element denied', array('!element' => $element_string));
								}
							}
							else {
								// Immediately stop the message creation process if access messages aren't allowed.
								return '';
							}
							break;
						case 'not found':
							$output_array['error'] = t('!element not found', array('!element' => $element_string));
							break;
						case 'no content':
							$output_array['error'] = t('!element has no content', array('!element' => $element_string));
							break;
					}
					if (!$output_array['error']) {
						$output_array['error'] = t('Unknown error type %type for %variable of the first parameter of %function', array('%type' => $error['type'], '%variable' => '$message[\''. $mainkey .'\'][\'type\']', '%function' => __FUNCTION__));
					}
					// If $set_drupal_message this is used as type.
					$drupal_set_message_type = isset($drupal_set_message_type) ? $drupal_set_message_type : 'error';
				}
			}
			// Create a warning message. Could be part of a critical message.
			if (is_array($mainvalue) && substr($mainkey, 0, 7) == 'warning' && ($message_level == 'all' || ($message_level == 'warning' && $drupal_set_message_type != 'status') || $drupal_set_message_type == 'error')) {
				// Validate and set context.
				foreach ($mainvalue as $key => $value) {
					switch ($key) {
						case 'activate module':
							$warning[$key] = t('Install & activate module %module', array('%module' => $value));
							break;
						case 'check variable':
							$warning[$key] = t('Check value for %variable or ask your site administrator.', array('%variable' => $value));
							break;
						case 'option ignored':
							$text = 'Linodef tag with id %id ignores option %option';
							$replacekeys = array('%id', '%option');
							$warning[$key] = linodef_message_validation($text, $value, $replacekeys, array($mainkey, $key));
							break;
						case 'option unknown':
							$text = 'Linodef tag with id %id contains unknown option %option (all options must be written in lower case)';
							$replacekeys = array('%id', '%option');
							$warning[$key] = linodef_message_validation($text, $value, $replacekeys, array($mainkey, $key));
							break;
						case 'supported field types':
							$warning[$key] = t('Supported fields must store a (single or multiple) value such as textfields & datefield (from date).');
							break;
					}
					if (!$warning[$key]) {
						$warning[$key] = t('Unknown key %key with value %value for %variable in %function', array('%key' => $key, '%value' => $value, '%variable' => '$message[\''. $mainkey .'\']', '%function' => __FUNCTION__));
					}
				}
				$output_array['warning'] = implode(' ', $warning);
				// If $set_drupal_message this is used as type.
				$drupal_set_message_type = isset($drupal_set_message_type) ? $drupal_set_message_type : 'warning';
			}
			// Create explanation. Subordinate clause of a critical or warning message.
			if (is_array($mainvalue) && substr($mainkey, 0, 11) == 'explanation' && ($message_level == 'all' || ($message_level == 'warning' && $drupal_set_message_type != 'status') || $drupal_set_message_type == 'error')) {
				// Validate and set context.
				foreach ($mainvalue as $key => $value) {
					switch ($key) {
						case 'empty value':
							$explanation[$key] = t('since it has no value');
							break;
						case 'wrong value':
							$text = 'since it does not accept the value %value. Valid values are %valid_values';
							$replacekeys = array('%value', '%valid_values');
							$explanation[$key] = linodef_message_validation($text, $value, $replacekeys, array($mainkey, $key));
							break;
						case 'value not compatible with objtype':
							$text = 'since the object type %objtype does not use the value %value';
							$replacekeys = array('%objtype', '%value');
							$explanation[$key] = linodef_message_validation($text, $value, $replacekeys, array($mainkey, $key));
							break;
						case 'option not compatible with objtype':
							$text = 'since the object type %objtype does not use the option %option';
							$replacekeys = array('%objtype', '%option');
							$explanation[$key] = linodef_message_validation($text, $value, $replacekeys, array($mainkey, $key));
							break;
						case 'option to use in tag id':
							$text = 'to use the option %option of Linodef tag with id %id';
							$replacekeys = array('%id', '%option');
							$explanation[$key] = linodef_message_validation($text, $value, $replacekeys, array($mainkey, $key));
							break;
					}
					if (!$explanation[$key]) {
						$explanation[$key] = t('Unknown key %key with value %value for %variable in %function', array('%key' => $key, '%value' => $value, '%variable' => '$message[\''. $mainkey .'\']', '%function' => __FUNCTION__));
					}
				}
				$output_array['explanation'] = implode(' ', $explanation);
			}
			// Create a custom message. In most cases a subordinate clause of an error or warning messages for additional explanations. Could be part of a critical message.
			if (is_string($mainvalue) && substr($mainkey, 0, 6) == 'custom' && ($message_level == 'all' || ($message_level == 'warning' && $drupal_set_message_type != 'status') || $drupal_set_message_type == 'error')) {
				$output_array['custom'] = $mainvalue;
				// Set punctuation mark if not set.
				if (substr($output_array['custom'], -1) != '.') {
					$output_array['custom'] .= '.';
				}
			}
		}
		// Combine messages.
		if (isset($output_array) && is_array($output_array)) {
			$output = ' '. implode(' ', $output_array);
			// Set punctuation mark if not set.
			if (substr($output, -1) != '.') {
				$output .= '.';
			}
		}
	}
	elseif (!$message_location_none) {
		$output = t('Parameter %variable of %function has to be an array.', array('%variable' => '$message', '%function' => __FUNCTION__));
	}

	// Create Drupal message.
	if ($drupal_set_message && !empty($message_location['page'])) {
		if (!$drupal_set_message_type || ($drupal_set_message_type != 'status' && $drupal_set_message_type != 'warning' && $drupal_set_message_type != 'error')) {
			$drupal_set_message_type = 'warning';
		}
		$message_array = drupal_set_message();
		if (!is_array($message_array) || (is_array($message_array) && !in_array($output, $message_array))) {
			drupal_set_message($output, $drupal_set_message_type);
		}
	}
	// Create inline message.
	if (isset($output) && !empty($message_location['inline'])) {
		// Attach Drupal default message classes. Works only if HTML input filter allows span tags.
		if ($drupal_set_message_type == 'error') {
			$output = '<span class="messages error">'. $output .'</span>';
		}
		elseif ($drupal_set_message_type == 'warning') {
			$output = '<span class="messages warning">'. $output .'</span>';
		}
		else {
			$output = '<span class="messages">'. $output .'</span>';
		}
		return $output .' ';
	}
	else {
		return '';
	}
}

/**
 * Validates the message. In case the message isn't valid output an error.
 */
function linodef_message_validation($text, $value, $replacekeys, $variable, $function = 'linodef_message') {
	if (implode('', array_keys($value)) == implode('', array_values($replacekeys))) {
		return t($text, $value);
	}
	// Message not valid.
	else {
		foreach ($variable as $value) {
			$array_parts .= '[\'' . $value . '\']';
		}
		$formatted_var = '$message' . $array_parts;
		$replacekeys = implode(', ', $replacekeys);
		return t('Variable %variable of the first parameter of %function has to be an array with keys %keys', array('%variable' => $formatted_var, '%function' => $function, '%keys' => $replacekeys));
	}
}

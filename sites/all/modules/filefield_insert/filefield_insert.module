<?php
// $Id: filefield_insert.module,v 1.5 2009/06/30 22:13:22 quicksketch Exp $

/**
 * @file
 * Allows insertion of files and images directly into the body field
 * by clicking a link in the list of FileField files on that node.
 */

/**
 * Implementation of hook_elements().
 */
function filefield_insert_elements() {
  $extra = array('#after_build' => array('filefield_insert_process'));

  return array(
    'filefield_widget' => $extra,
    'imagefield_widget' => $extra,
  );
}

/**
 * Implementation of hook_theme().
 */
function filefield_insert_theme() {
  return array(
    'filefield_insert_widget' => array(
      'arguments' => array('field' => NULL),
      'template' => 'filefield-insert-widget',
    ),
    'filefield_insert_image' => array(
      'arguments' => array('field' => NULL),
      'template' => 'filefield-insert-image',
      'preprocess functions' => array('template_preprocess_filefield_insert'),
    ),
    'filefield_insert_file' => array(
      'arguments' => array('field' => NULL),
      'template' => 'filefield-insert-file',
      'preprocess functions' => array('template_preprocess_filefield_insert'),
    ),
  );
}

/**
 * Process function for file fields.
 */
function filefield_insert_process($element) {
  static $js_added;

  $item = $element['#value'];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  // Merge in settings until widget settings are stored by CCK.
  $field['widget'] = array_merge($field['widget'], filefield_insert_get_settings($field));

  // Bail out of FileField Insert is not enabled on this field.
  if (!$field['widget']['filefield_insert']) {
    return $element;
  }

  // Add base settings only once.
  if (!isset($js_added)) {
    $js_added = array();
    $settings = array('fileDirectoryPath' => file_directory_path());
    drupal_add_js(array('fileFieldInsert' => $settings), 'setting');
    drupal_add_js(drupal_get_path('module', 'filefield_insert') . '/filefield_insert.js');
  }

  // Add the templates to be used for image insertion once per field type.
  if (!isset($js_added['widgets'][$field['widget']['module']])) {
    $js_added['widgets'][$field['widget']['module']] = TRUE;
    if ($field['widget']['module'] == 'imagefield') {
      $settings = array('image' => theme('filefield_insert_image', $field));
      drupal_add_js(array('fileFieldInsert' => array('templates' => $settings)), 'setting');
    }
    elseif ($field['widget']['module'] == 'filefield') {
      $settings = array(
        'fileImage' => theme('filefield_insert_image', $field),
        'file' => theme('filefield_insert_file', $field),
      );
      drupal_add_js(array('fileFieldInsert' => array('templates' => $settings)), 'setting');
    }
  }

  // Add image insertion widget per-field instance.
  if (!isset($js_added['fields'][$field['field_name']])) {
    $js_added['fields'][$field['field_name']] = TRUE;
    $settings = array(
      'widgets' => array(
        $field['field_name'] => theme('filefield_insert_widget', $field),
      ),
    );
    drupal_add_js(array('fileFieldInsert' => $settings), 'setting');
  }

  if ($item['fid']) {
    $element['filefield_insert_location'] = array(
      '#id' => $element['#id'] . '-insert',
      '#name' => $element['#name'] . '[insert]',
      '#type' => 'hidden',
      '#value'=> t('This hidden element will be replaced with the FileField Insert element.'),
      '#attributes' => array('class' => 'filefield-insert-location'),
      '#weight' => -1,
    );

    $element['filefield_insert_url'] = array(
      '#id' => $element['#id'] . '-insert-url',
      '#name' => $element['#name'] . '[insert_url]',
      '#type' => 'hidden',
      '#value'=> preg_replace('/^' . preg_quote($GLOBALS['base_url'] .'/', '/') . '/', base_path(), file_create_url($item['filepath'])),
      '#attributes' => array('class' => 'filefield-insert-url'),
    );
    $element['filefield_insert_widget'] = array(
      '#id' => $element['#id'] . '-insert-widget',
      '#name' => $element['#name'] . '[insert_widget]',
      '#type' => 'hidden',
      '#value'=> $field['field_name'],
      '#attributes' => array('class' => 'filefield-insert-widget'),
    );

    // Width and height properties used for image insertion.
    $image_info = image_get_info($item['filepath']);
    $element['filefield_insert_max_width'] = array(
      '#id' => $element['#id'] . '-insert-max-width',
      '#name' => $element['#name'] . '[insert_max_width]',
      '#type' => 'hidden',
      '#value'=> empty($field['widget']['filefield_insert_width']) ? 0 : $field['widget']['filefield_insert_width'],
      '#attributes' => array('class' => 'filefield-insert-max-width'),
    );
    $element['filefield_insert_width'] = array(
      '#id' => $element['#id'] . '-insert-width',
      '#name' => $element['#name'] . '[insert_width]',
      '#type' => 'hidden',
      '#value'=> $image_info ? $image_info['width'] : 0,
      '#attributes' => array('class' => 'filefield-insert-width'),
    );
    $element['filefield_insert_height'] = array(
      '#id' => $element['#id'] . '-insert-height',
      '#name' => $element['#name'] . '[insert_height]',
      '#type' => 'hidden',
      '#value'=> $image_info ? $image_info['height'] : 0,
      '#attributes' => array('class' => 'filefield-insert-height'),
    );
  }

  return $element;
}

/**
 * Get a list of ImageCache presets suitable for use as an #options array.
 */
function filefield_insert_preset_options($preset_settings) {
  $presets = imagecache_presets();
  $options = array(
    'options' => array(),
    'default' => array(),
  );
  foreach ($presets as $preset) {
    $options['options'][$preset['presetname']] = t($preset['presetname']);
    if (in_array($preset['presetname'], $preset_settings)) {
      $options['default'][] = $preset['presetname'];
    }
  }
  return $options;
}

/**
 * Implementation of hook_form_alter() for content_field_edit_form.
 */
function filefield_insert_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'content_field_edit_form' && isset($form['#field']) && in_array($form['#field']['widget']['type'], array('filefield_widget', 'imagefield_widget'))) {
    $form['#field']['widget'] = array_merge($form['#field']['widget'], filefield_insert_get_settings($form['#field']));
    $form['widget'] = array_merge($form['widget'], filefield_insert_widget_form($form['#field']));
    $form['#submit'][] = 'filefield_insert_widget_form_submit';
  }
}

/**
 * Configuration form for editing insert settings for a field instance.
 */
function filefield_insert_widget_form($field) {
  $form['filefield_insert'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTML insert'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These options allow the user to easily insert an &lt;a&gt; or &lt;img&gt; tag into text areas or WYSIWYG editors after uploading a file or image.'),
    '#weight' => 15,
  );

  $form['filefield_insert']['filefield_insert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable HTML insert'),
    '#default_value' => $field['widget']['filefield_insert'],
    '#description' => t('Enable the insertion options for this widget.'),
  );

  if (module_exists('imagecache')) {
    if ($field['widget']['type'] == 'imagefield_widget') {
      $options = filefield_insert_preset_options($field['widget']['filefield_insert_presets']);
      $form['filefield_insert']['filefield_insert_presets'] = array(
        '#title' => t('Enabled ImageCache presets'),
        '#type' => 'checkboxes',
        '#options' => $options['options'],
        '#default_value' => $options['default'],
        '#description' => t('Select which ImageCache presets should be available when sending images to text areas. If no presets are selected, the option to use a preset is not displayed.'),
      );
    }
    else {
      $form['filefield_insert']['#description'] .= ' ' . t('Note that only file fields that use the "Image" widget type support ImageCache configuration options.');
    }
  }

  $form['filefield_insert']['filefield_insert_width'] = array(
    '#title' => t('Maximum image insert width'),
    '#type' => 'textfield',
    '#size' => 10,
    '#field_suffix' => ' '. t('pixels'),
    '#default_value' => empty($field['widget']['filefield_insert_width']) ? '' : $field['widget']['filefield_insert_width'],
    '#description' => t('When inserting images, the height and width of images may be scaled down to fit within the specified width. Note that this does not resize the image, it only affects the HTML output. To resize images it is recommended to install the <a href="http://drupal.org/project/image_resize_filter">Image Resize Filter</a> module.'),
  );

  return $form;
}

/**
 * Submit handler for the FileField widget field settings form.
 */
function filefield_insert_widget_form_submit(&$form, &$form_state) {
  $field = content_fields($form_state['values']['field_name'], $form_state['values']['type_name']);
  $settings = array(
    'filefield_insert' => FALSE,
    'filefield_insert_presets' => array(),
    'filefield_insert_width' => '',
  );

  if (isset($form_state['values']['filefield_insert_presets'])) {
    foreach ($form_state['values']['filefield_insert_presets'] as $preset => $enabled) {
      if ($enabled) {
        $settings['filefield_insert_presets'][] = $preset;
      }
    }
  }

  $settings['filefield_insert'] = (bool) $form_state['values']['filefield_insert'];
  $settings['filefield_insert_width'] = empty($form_state['values']['filefield_insert_width']) ? 0 : (int)$form_state['values']['filefield_insert_width'];

  filefield_insert_set_settings($field, $settings);
}

/**
 * Retrieve FileField Insert settings for a field.
 *
 * This function is a temporary variable retrieval function until
 * http://drupal.org/node/417122 is committed and field settings may be added
 * by third-party modules through hook_field_settings_alter().
 */
function filefield_insert_get_settings($field) {
  $all_settings = variable_get('filefield_insert_settings', array());
  $settings = empty($all_settings[$field['type_name']][$field['field_name']]) ? array() : $all_settings[$field['type_name']][$field['field_name']];

  return array(
    'filefield_insert' => empty($settings['filefield_insert']) ? FALSE : $settings['filefield_insert'],
    'filefield_insert_presets' => empty($settings['filefield_insert_presets']) ? array() : $settings['filefield_insert_presets'],
    'filefield_insert_width' => empty($settings['filefield_insert_width']) ? '' : $settings['filefield_insert_width'],
  );
}

/**
 * Set FileField Insert settings for a field.
 *
 * This function is a temporary variable set function until
 * http://drupal.org/node/417122 is committed and field settings may be added
 * by third-party modules through hook_field_settings_alter().
 */
function filefield_insert_set_settings($field, $settings) {
  $all_settings = variable_get('filefield_insert_settings', array());
  $all_settings[$field['type_name']][$field['field_name']] = $settings;

  variable_set('filefield_insert_settings', $all_settings);
}

/**
 * Preprocess variables for the filefield-insert-*.tpl.php files.
 *
 * Right now our variables are simply place holders replaced by JavaScript.
 */
function template_preprocess_filefield_insert(&$vars) {
  $vars['url'] = '__url__';
  $vars['description'] = '__description__';
  $vars['alt'] = '__alt__';
  $vars['title'] = '__title__';
  $vars['extension'] = '__extension__';
  $vars['height'] = '__height__';
  $vars['width'] = '__width__';
}

/**
 * Preprocess variables for the filefield-insert-widget.tpl.php file.
 */
function template_preprocess_filefield_insert_widget(&$vars) {
  // Set up options for ImageCache presets.
  $vars['image_presets'] = array();
  if ($vars['field']['widget']['type'] == 'imagefield_widget' && module_exists('imagecache')) {
    $presets = imagecache_presets();
    foreach ($presets as $preset) {
      if (!in_array($preset['presetname'], $vars['field']['widget']['filefield_insert_presets'])) {
        continue;
      }

      // Determine the final width/height.
      $width = 0;
      $height = 0;
      foreach ($preset['actions'] as $action) {
        if (isset($action['data']['width']) || isset($action['data']['height'])) {
          $width = !empty($action['data']['width']) ? $action['data']['width'] : 0;
          $height = !empty($action['data']['height']) ? $action['data']['height'] : 0;
        }
      }

      $vars['image_presets'][$preset['presetname'] . '|' . $width . '|' . $height] = t($preset['presetname']);
    }
    $vars['image_presets'] = array_diff($vars['image_presets'], variable_get('filefield_insert_preset_exclude', array()));
  }

  if (!empty($vars['image_presets'])) {
    $vars['image_presets'] = array_merge(array('' => t('Original')), $vars['image_presets']);
  }
}

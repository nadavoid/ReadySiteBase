<?php
// $Id: panels_stylizer.module,v 1.1.2.2 2010/05/20 01:49:14 sdboyer Exp $

/**
 * @file
 * Panels stylizer module
 *
 * This module utlizes the CTools stylizer plugin to create custom styles
 * that can be used on panel panes and regions.
 *
 * The Stylizer tool allows recolorable styles to be created via a miniature
 * scripting language. Panels utilizes this to allow administrators to add
 * styles directly to any panel display.

 */
function panels_stylizer_menu() {
  if (!module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
    return;
  }

  $items = array();
  $stylizer_base = array(
    'file' => 'panels_stylizer.admin.inc',
    'access arguments' => array('administer panels styles'),
  );

  $items['admin/build/panels/style'] = array(
    'title' => 'Styles',
    'page callback' => 'panels_stylizer_list_styles_page',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  ) + $stylizer_base;

  $items['admin/build/panels/style/list'] = array(
    'title' => 'List',
    'page callback' => 'panels_stylizer_list_styles_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $stylizer_base;

  $items['admin/build/panels/style/add'] = array(
    'title' => 'Add pane style',
    'page callback' => 'panels_stylizer_add_style_page',
    'page arguments' => array('pane'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  ) + $stylizer_base;

  $items['admin/build/panels/style/add-region'] = array(
    'title' => 'Add region style',
    'page callback' => 'panels_stylizer_add_style_page',
    'page arguments' => array('region'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  ) + $stylizer_base;

  $items['admin/build/panels/style/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panels_stylizer_import_style_page'),
    'access callback' => 'ctools_access_multiperm',
    'access arguments' => array('administer panels styles', 'use PHP for block visibility'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  ) + $stylizer_base;

  $items['admin/build/panels/style/edit/%panels_menu_style'] = array(
    'title' => 'Edit',
    'page callback' => 'panels_stylizer_edit_style_page',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
  ) + $stylizer_base;

  $items['admin/build/panels/style/delete/%panels_menu_style'] = array(
    'title' => 'delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panels_stylizer_delete_style_page', 5),
    'type' => MENU_CALLBACK,
  ) + $stylizer_base;

  $items['admin/build/panels/style/export/%panels_menu_style'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panels_stylizer_export_style_page', 5),
    'type' => MENU_CALLBACK,
  ) + $stylizer_base;

  $items['admin/build/panels/style/clone/%panels_menu_style'] = array(
    'title' => 'Clone',
    'page callback' => 'panels_stylizer_clone_style_page',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
  ) + $stylizer_base;

  $items['admin/build/panels/style/enable/%panels_menu_style'] = array(
    'title' => 'Enable',
    'page callback' => 'panels_stylizer_enable_style_page',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
  ) + $stylizer_base;

  $items['admin/build/panels/style/disable/%panels_menu_style'] = array(
    'title' => 'Disable',
    'page callback' => 'panels_stylizer_disable_style_page',
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
  ) + $stylizer_base;

  // On the fly creation of styles in panes.
  $items['admin/build/panels/style/pane-style/%/%panels_edit_cache'] = array(
    'title' => 'Disable',
    'page callback' => 'panels_stylizer_pane_add_style',
    'page arguments' => array(5, 6),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  ) + $stylizer_base;

  return $items;
}

/**
 * Menu callback to load a style from %panels_menu_style
 */
function panels_menu_style_load($name) {
  return panels_stylizer_load($name);
}

/**
 * Implementation of hook_perm()
 */
function panels_stylizer_perm() {
  return array(
    'administer panels styles',
  );
}

/**
 * Implementation of hook_theme()
 */
function panels_stylizer_theme() {
  ctools_include('stylizer');
  $theme = array();

  $plugins = ctools_get_style_bases();
  foreach ($plugins as $plugin) {
    if ($plugin['module'] == 'panels' && !empty($plugin['theme'])) {
      if ($plugin['type'] == 'region') {
        $theme[$plugin['theme']] = array(
          'arguments' => array('settings' => NULL, 'classes' => NULL, 'content' => NULL),
          'path' => $plugin['path'],
        );
      }
      else {
        $theme[$plugin['theme']] = array(
          'arguments' => array('settings' => NULL, 'content' => NULL, 'pane' => NULL, 'display' => NULL),
          'path' => $plugin['path'],
        );
      }

      // if no theme function exists, assume template.
      if (!function_exists("theme_$plugin[theme]")) {
        $theme[$plugin['theme']]['template'] = str_replace('_', '-', $plugin['theme']);
        $theme[$plugin['theme']]['file'] = $plugin['file']; // for preprocess.
      }
    }
  }

  return $theme;
}

/**
 * Implementation of hook_ctools_plugin_directory() to let the system know
 * we implement task and task_handler plugins.
 */
function panels_stylizer_ctools_plugin_directory($module, $plugin) {
  // Safety: go away if CTools is not at an appropriate version.
  if (!module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
    return;
  }
  if ($module == 'ctools' && $plugin == 'style_bases' || $module == 'panels' && $plugin == 'styles') {
    return 'plugins/' . $plugin;
  }
}

// -----------------------------------------------------------------------
// Database routines

/**
 * Create a new style with defaults appropriately set from schema.
 */
function panels_stylizer_new() {
  ctools_include('export');
  return ctools_export_new_object('panels_style');
}

/**
 * Load a single stylizer style.
 */
function panels_stylizer_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('panels_style', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Load all stylizer styles.
 */
function panels_stylizer_load_all() {
  ctools_include('export');
  return ctools_export_load_object('panels_style');
}

/**
 * Write a stylizer style the database.
 */
function panels_stylizer_save(&$style) {
  $update = (isset($style->sid)) ? array('sid') : array();
  drupal_write_record('panels_style', $style, $update);
  return $style;
}

/**
 * Remove a stylizer style.
 */
function panels_stylizer_delete($style) {
  db_query("DELETE FROM {panels_style} WHERE name = '%s'", $style->name);
}

/**
 * Export a stylizer style.
 */
function panels_stylizer_export($style, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('panels_style', $style, $indent);

  return $output;
}

function panels_stylizer_lipsum() {
  return "
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus at velit dolor. Donec egestas tellus sit amet urna rhoncus adipiscing. Proin nec porttitor sem. Maecenas aliquam, purus nec tempus dignissim, nulla arcu aliquam diam, non tincidunt massa ante vel dolor. Aliquam sapien sapien, tincidunt id tristique at, pretium sagittis libero.</p>

    <p>Nulla facilisi. Curabitur lacinia, tellus sed tristique consequat, diam lorem scelerisque felis, at dictum purus augue facilisis lorem. Duis pharetra dignissim rutrum. Curabitur ac elit id dui dapibus tincidunt. Nulla eget sem quam, non eleifend eros. Cras porttitor tempus lectus ac scelerisque. Curabitur vehicula bibendum lorem, vitae ornare ligula venenatis ut.</p>
  ";
}

/**
 * Generate a preview given the current settings.
 */
function panels_stylizer_region_preview($plugin, $settings) {
  ctools_stylizer_add_css($plugin, $settings);
  return theme($plugin['theme'], $settings, ctools_stylizer_get_css_class($plugin, $settings), panels_stylizer_lipsum());
}

/**
 * Generate a preview given the current settings.
 */
function panels_stylizer_pane_preview($plugin, $settings) {
  ctools_stylizer_add_css($plugin, $settings);
  $pane = new stdClass();

  $content = new stdClass;
  $content->title = t('Lorem ipsum');
  $content->content = panels_stylizer_lipsum();
  $content->type = 'dummy';
  $content->subtype = 'dummy';

  $content->css_class = ctools_stylizer_get_css_class($plugin, $settings);

  $display = new panels_display();

  if (!empty($plugin['theme'])) {
    return theme($plugin['theme'], $settings, $content, $pane, $display);
  }
  else {
    return theme('panels_pane', $content, $pane, $display);
  }
}
